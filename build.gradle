plugins {
    id 'java'
    id 'jacoco'
    id 'war'
    alias libs.plugins.org.springframework.boot
    alias libs.plugins.io.spring.dependency.management
}

group = 'fr.alten'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

jacoco {
    // Use latest version available
    toolVersion = "0.8.12"
}

// Create task to initialize database
tasks.register('initDb', JavaExec) {
    group = 'database'
    description = 'Initialize database via Spring'

    // Use main sources and dependencies
    classpath = sourceSets.main.runtimeClasspath
    // Specify class applicaiton launcher
    mainClass = 'fr.alten.test_back.TestBackApplication'

    // Define used JSON data path
    def dataPath = project.hasProperty("jsonDataPath")
        ? project.property("jsonDataPath")
        // Use test path if we are in test run, otherwise use default path
        : "classpath:initialData.json:_"

    args = [
        // Set specific profile
        "--spring.profiles.active=init-db",
        // Disable web server
        "--spring.main.web-application-type=none",
        // Specify JSON data file to user
        "--jsonData.path=${dataPath}"
    ]
}

tasks.test {
    // Generate test report after all tests
    finalizedBy jacocoTestReport
}

// Report configuration
jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // YAML parser
    implementation libs.jackson.dataformat.yaml
    // JWT token libraries
    implementation libs.jjwt.api
    implementation libs.jjwt.impl
    implementation libs.jjwt.jackson

    // Spring boot libraries
    implementation libs.spring.boot.starter
    implementation libs.spring.boot.starter.data.jpa
    implementation libs.spring.boot.starter.data.rest
    implementation libs.spring.boot.starter.security
    implementation libs.spring.boot.starter.web
    implementation libs.spring.boot.starter.validation

    // Spring security libraries
    implementation libs.spring.security.core
    implementation libs.spring.security.config
    implementation libs.spring.security.web

    developmentOnly libs.spring.boot.docker.compose

    // Database drivers
    runtimeOnly libs.h2
    runtimeOnly libs.mysql.connector.j

    // Use
    providedRuntime libs.spring.boot.starter.tomcat

    // Spring test libraries with junit
    testImplementation libs.junit.jupiter
    testImplementation libs.mysql
    testImplementation libs.spring.boot.starter.test
    testImplementation libs.spring.boot.testcontainers
    testImplementation libs.spring.security.test


    testRuntimeOnly libs.junit.platform.launcher
}

tasks.named('test') {
    useJUnitPlatform()
}
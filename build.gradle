plugins {
    id 'java'
    id 'jacoco'
    id 'war'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'fr.alten'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

jacoco {
    // Use latest version available
    toolVersion = "0.8.12"
}

// Create task to initialize database
tasks.register('initDb', JavaExec) {
    group = 'database'
    description = 'Initialize database via Spring'

    // Use main sources and dependencies
    classpath = sourceSets.main.runtimeClasspath
    // Specify class applicaiton launcher
    mainClass = 'fr.alten.test_back.TestBackApplication'

    // Define used JSON data path
    def dataPath = project.hasProperty("jsonDataPath")
            ? project.getProperty("jsonDataPath")
            // Use test path if we are in test run, otherwise use default path
            : "classpath:initialData.json"

    args = [
            // Set specific profile
            "--spring.profiles.active=init-db",
            // Disable web server
            "--spring.main.web-application-type=none",
            // Specify JSON data file to user
            "--jsonData.path=${dataPath}"
    ]
}

tasks.test {
    // Generate test report after all tests
    finalizedBy jacocoTestReport
}

// Report configuration
jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // YAML parser
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    // JWT token libraries
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Spring boot libraries
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Spring security libraries
    implementation 'org.springframework.security:spring-security-core'
    implementation 'org.springframework.security:spring-security-web'
    implementation 'org.springframework.security:spring-security-config'

    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    // Database drivers
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Use
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    // Spring test libraries with junit
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}